
private void  rabiespreading()
{
         dogeverygroup= new dogamountSEIRV(xgridsize,ygridsize,e_to_i_date,i_to_r_date);
         dogeachgroup = new List<dogamountSEIRV>();
        for(int i=0;i<dogdata.Count;i++)
        {
              dogeachgroup.Add( new dogamountSEIRV(xgridsize,ygridsize,e_to_i_date,i_to_r_date));
        }
         homedestination = new int[xgridsize , ygridsize];
         fleefactor = new float[xgridsize , ygridsize,6];
         inclinefactor = new float[xgridsize , ygridsize,6];
         homefactor = new float [xgridsize , ygridsize,dogdata.Count,6];
         float[,] finalplusamount = new float[xgridsize , ygridsize];
         float[,,] finalplusamount_E = new float[xgridsize , ygridsize,e_to_i_date];
         float[,,] finalplusamount_R = new float[xgridsize , ygridsize,i_to_r_date];
        //float[,] groupkernel = new float[xgridsize , ygridsize];
       //  float[,] attractkernel = new float[xgridsize , ygridsize];

         /*float inclineweight = 0.5f;
         float fleeweight = 0.5f;
         float chaseweight = 0.5f;
         float groupweight = 0.5f;
         float attractweight = 0.5f;*/


         //let's set environment
//--------------------------------------------------------------------------------------------------------------------
        //set suspect
        for (int m = 0; m < xgridsize; m++)
            {
                for (int n = 0; n < ygridsize; n++)
                {
                    dogeverygroup.suspectamount[m,n]=doggroup[m,n];
                }
            }


        //add infect dog
         for (int i = 0; i < infectdogdata.Count; i++)
        {
             dogeverygroup.infectamount[ infectdogdata[i].lonid ,  infectdogdata[i].latid,0] =1.0f;// infectdogdata[i].size;
        }

        //Set group
        
        for(int x=0;x<xgridsize;x++)
             {
             for(int y=0;y<ygridsize;y++)
                {
                    if(dogeverygroup.suspectamount[x,y]>0.0f){homedestination[x,y]=findNearestGroupNeighbour(x,y);}
                    else{homedestination[x,y]=-1;}
                    dogeachgroup[(findNearestGroupNeighbour(x,y))].suspectamount[x,y]=dogeverygroup.suspectamount[x,y];
                    if(foundinfect(x,y))
                    {
                         dogeachgroup[(findNearestGroupNeighbour(x,y))].infectamount[x,y,0]+=dogeverygroup.infectamount[x,y,0];
                    }
                }
             }
//--------------------------------------------------------------------------------------------------------------------
        
      
          
    //Loop begin
//--------------------------------------------------------------------------------------------------------------------
            for (int r = 0; r < 200; r++)
            {
            
            Debug.Log("Rabies is running frame " + (r+1));
            //for incline
            float up_incdis=0.0f,down_incdis=0.0f,left_incdis=0.0f,right_incdis=0.0f;
            float newdistribution_criteria =0.0001f;
            float exposecriteria=newdistribution_criteria*(exposesum()/sumeverypoint());
            //for infect
            float infectedcriteria=newdistribution_criteria*(infectsum()/sumeverypoint());
            float sumforfinalize=0.0f;

             //incline Factor
        //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
           
            for (int m = 0; m < xgridsize; m++)
            {
                for (int n = 0; n < ygridsize; n++)
                {
                        if(m==0) left_incdis = distributeElevationLevel(heightxy[m , n] , heightxy[m , n ])*0.20f;
                        else left_incdis = distributeElevationLevel(heightxy[m , n] , heightxy[m-1 , n ])*0.20f;
                        if(m==xgridsize-1) right_incdis = distributeElevationLevel(heightxy[m , n] , heightxy[m , n ])*0.20f;
                        else  right_incdis = distributeElevationLevel(heightxy[m , n] , heightxy[m+1 , n ])*0.20f;
                        if(n==0) down_incdis =distributeElevationLevel(heightxy[m , n] , heightxy[m , n ])*0.20f;
                        else down_incdis =distributeElevationLevel(heightxy[m , n] , heightxy[m , n - 1])*0.20f;
                        if(n==ygridsize-1) up_incdis =distributeElevationLevel(heightxy[m , n] , heightxy[m , n ]) *0.20f;
                        else  up_incdis =distributeElevationLevel(heightxy[m , n] , heightxy[m , n + 1]) *0.20f;
                       
                        
                     

                        inclinefactor[m,n,1]=(-1.0f)*(up_incdis+down_incdis+left_incdis+right_incdis);
                        inclinefactor[m,n,2]=up_incdis;
                        inclinefactor[m,n,3]=down_incdis;
                        inclinefactor[m,n,4]=left_incdis;
                        inclinefactor[m,n,5]=right_incdis;

                      /* 
                        if (m==0 )
                        {
                            left_incdis=0.0f;
                        }
                        else if (m==xgridsize-1)
                        {
                           right_incdis=0.0f;
                        }
                       
                        if (n==0 )
                        {
                            down_incdis =0.0f;
                        }
                        else if (n==ygridsize-1 )
                        {
                           up_incdis =0.0f;
                        }

                         if(up_incdis<exposecriteria) up_incdis=0.0f;
                        if(down_incdis<exposecriteria) down_incdis=0.0f;
                        if(left_incdis<exposecriteria) left_incdis=0.0f;
                        if(right_incdis<exposecriteria) right_incdis=0.0f;

                        plusamount[m,n,d]-=(left_incdis+right_incdis+down_incdis+up_incdis);
                        plusamount[m,n+1,d]+=up_incdis;
                        plusamount[m,n-1,d]+=down_incdis;
                        plusamount[m+1,n,d]+=right_incdis;
                        plusamount[m-1,n,d]+= left_incdis;*/
                        
                    
                }
            }
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++     
            //end  incline Factor

            //flee+fightback Factor
            //everydog when see infect will flee
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++     
                 for (int m = 0; m < xgridsize; m++)
                {
                    for (int n = 0; n < ygridsize; n++)
                    {
                        //flee value of each side
                        up_incdis =fleelevely(m,n,0);
                        down_incdis =fleelevely(m,n,1);
                        left_incdis = fleelevelx(m,n,0);
                        right_incdis = fleelevelx(m,n,1);
                         //plus center axis flee value to both side in same axis
                        float cenx=0.0f,ceny=0.0f,fight1=0.0f,fight2=0.0f;
                        cenx=fleecenterx(m,n);
                        ceny=fleecentery(m,n);
                        up_incdis += (ceny/2.0f);
                        down_incdis += (ceny/2.0f);
                        left_incdis += (cenx/2.0f);
                        right_incdis +=(cenx/2.0f);

                        //then calculate fight back 20%
                        fight1 =  up_incdis*0.2f;
                        fight2 =  down_incdis*0.2f;
                        up_incdis += (fight2-fight1);
                        up_incdis += (fight1-fight2);
                        fight1 =  left_incdis*0.2f;
                        fight2 =  right_incdis*0.2f;
                        left_incdis += (fight2-fight1);
                        right_incdis += (fight1-fight2);

                        //now we got all flee value , finalize
                        sumforfinalize = up_incdis+down_incdis+left_incdis+right_incdis;
                        up_incdis =  up_incdis/sumforfinalize;
                        down_incdis =  down_incdis/sumforfinalize;
                        left_incdis =  left_incdis/sumforfinalize;
                        right_incdis =  right_incdis/sumforfinalize;
                        fleefactor[m,n,1]=-1.0f;// everydog flee from center //will be back if some side can't expand
                        fleefactor[m,n,2]=up_incdis;
                        fleefactor[m,n,3]=down_incdis;
                        fleefactor[m,n,4]=left_incdis;
                        fleefactor[m,n,5]=right_incdis;
                    }
                }

            
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 


             //chase Factor
             //rabies chase every dog
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    

             float chasevalue=0.0f;
             for (int m = 0; m < xgridsize; m++)
                {
                    for (int n = 0; n < ygridsize; n++)
                    {
                        if(foundinfect(m,n))
                        {
                            up_incdis=0.0f;
                            down_incdis=0.0f;
                            left_incdis=0.0f;
                            right_incdis=0.0f;
                            for(int x=m-rabiechaserange;x<=m+rabiechaserange;x++)
                            {
                             for(int y=n-(rabiechaserange-(int)Mathf.Abs(x-m));y<=n+((rabiechaserange-(int)Mathf.Abs(x-m)));y++)
                                 {
                                       if(founddog(x,y))
                                       {
                                           chasevalue = (rabiechaserange-(Mathf.Abs(x-m)+Mathf.Abs(y-n)))*dogeverygroup.suspectamount[x,y]+exposesumatpoint(x,y);
                                           if(x<m) left_incdis+= chasevalue;
                                           if(x>m) right_incdis+= chasevalue;
                                           if(y<n) down_incdis+= chasevalue;
                                           if(y>n) up_incdis+= chasevalue;
                                       }
                                 }
                            }
                        sumforfinalize = up_incdis+down_incdis+left_incdis+right_incdis;
                        up_incdis =  up_incdis/sumforfinalize;
                        down_incdis =  down_incdis/sumforfinalize;
                        left_incdis =  left_incdis/sumforfinalize;
                        right_incdis =  right_incdis/sumforfinalize;
                        chasefactor[m,n,1]=-1.0f;// everydog flee from center //will be back if some side can't expand
                        chasefactor[m,n,2]=up_incdis;
                        chasefactor[m,n,3]=down_incdis;
                        chasefactor[m,n,4]=left_incdis;
                        chasefactor[m,n,5]=right_incdis;
                        }
                    }
                }
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 








           
            for (int grabies = 0; grabies < dogeachgroup.Count; grabies++)
            {
           

            
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

            //Group Factor
            //need to do each group
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++     
            
            /* 
             for (int g = 0; g < dogdata.Count; g++)
             {
             for (int m = 0; m < xgridsize; m++)
                {
                    for (int n = 0; n < ygridsize; n++)
                    {

                        //groupfactor[m,n,g]
                    }
                }
             }
             */
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

            //Home Factor
            //need to do each group
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++     
            
             
             for (int m = 0; m < xgridsize; m++)
                {
                    for (int n = 0; n < ygridsize; n++)
                    {
                            up_incdis=0.0f;
                            down_incdis=0.0f;
                            left_incdis=0.0f;
                            right_incdis=0.0f;
                         //homefactor[m,n,g]
                         if(homedestination[m,n]!=grabies) //outside home
                         {
                             if(founddogwithgroup(m,n,grabies))
                             {
                                //find nearest route to home
                                int nearestrange=0;
                                int tempgroupcalc=0;
                                  nearestrange=Nearesthome_range(m,n,grabies);
                                  for(int i=m-nearestrange;i<=m+nearestrange;i++) //x axis
                                  {
                                    if(i==m-nearestrange) 
                                    {
                                        if(homedestination[i,n]==grabies) left_incdis += nearestrange;
                                    }
                                    else if(i==m+nearestrange)
                                    {
                                       if(homedestination[i,n]==grabies) right_incdis += nearestrange;
                                    }
                                    else //top and down
                                    {
                                        tempgroupcalc = nearestrange-(int)Mathf.Abs(i-m);
                                         if(homedestination[i,n+(tempgroupcalc)]==grabies)  //top
                                         {
                                             up_incdis += tempgroupcalc;
                                             if(i<m)
                                             {
                                                 left_incdis += m-i;
                                             }
                                             else if(i>m)
                                             {
                                                right_incdis += i-m;
                                             }
                                         }
                                         if(homedestination[i,n-(tempgroupcalc)]==grabies) //down
                                         {
                                            down_incdis += tempgroupcalc;
                                             if(i<m)
                                             {
                                                 left_incdis +=  m-i;
                                             }
                                             else if(i>m)
                                             {
                                                right_incdis += i-m;
                                             }
                                         }
                                    }
                                  }
                             }  
                         
                        //complete calculation
                         sumforfinalize = up_incdis+down_incdis+left_incdis+right_incdis;
                        up_incdis =  up_incdis/sumforfinalize;
                        down_incdis =  down_incdis/sumforfinalize;
                        left_incdis =  left_incdis/sumforfinalize;
                        right_incdis =  right_incdis/sumforfinalize;
                        homefactor[m,n,grabies,1]=-1.0f;// everydog flee from center //will be back if some side can't expand
                        homefactor[m,n,grabies,2]=up_incdis;
                        homefactor[m,n,grabies,3]=down_incdis;
                        homefactor[m,n,grabies,4]=left_incdis;
                        homefactor[m,n,grabies,5]=right_incdis;
                    }
                }
             }
            
            
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

             //attraction Factor
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++     
            /* 
             for (int m = 0; m < xgridsize; m++)
                {
                    for (int n = 0; n < ygridsize; n++)
                    {
                        
                    }
                }
            */
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ 



            //apply  factor
            //----------------------------------------------------------------------------------------------------

            //all weigth equally
            //All factor convalution
            float uptemp=0.0f,downtemp=0.0f,lefttemp=0.0f,righttemp=0.0f;
            //++++++++++++++++++++++++++++++++++++++++++++
                 for (int m = 0; m < xgridsize; m++)
                {
                    for (int n = 0; n < ygridsize; n++)
                    {
                         
                            up_incdis=inclinefactor[m,n,2]*((fleefactor[m,n,2]+homefactor[m,n,2,grabies])/2.0f)*0.25f;
                            down_incdis=inclinefactor[m,n,3]*((fleefactor[m,n,3]+homefactor[m,n,3,grabies])/2.0f)*0.25f;
                            left_incdis=inclinefactor[m,n,4]*((fleefactor[m,n,4]+homefactor[m,n,4,grabies])/2.0f)*0.25f;
                            right_incdis=inclinefactor[m,n,5]*((fleefactor[m,n,5]+homefactor[m,n,5,grabies])/2.0f)*0.25f;
                             //Suspect update
                             //++++++++++++++++++++++++++++++++++++++++++++
                            uptemp = up_incdis*dogeachgroup[grabies].suspectamount[m,n];
                            downtemp =down_incdis*dogeachgroup[grabies].suspectamount[m,n];
                            lefttemp  = left_incdis*dogeachgroup[grabies].suspectamount[m,n];
                            righttemp =right_incdis*dogeachgroup[grabies].suspectamount[m,n];
                            if(uptemp<newdistribution_criteria) uptemp=0.0f;
                            if(downtemp<newdistribution_criteria) downtemp=0.0f;
                            if(lefttemp<newdistribution_criteria) lefttemp=0.0f;
                            if(righttemp<newdistribution_criteria) righttemp=0.0f;

                            finalplusamount[m,n]-=(uptemp+ downtemp+lefttemp+righttemp);
                            if(m==0)finalplusamount[m,n]+=lefttemp;
                            else  finalplusamount[m-1,n]+=lefttemp;
                            if(m==xgridsize-1)finalplusamount[m,n]+=righttemp;
                            else  finalplusamount[m+1,n]+=righttemp;
                            if(n==0)finalplusamount[m,n]+=downtemp;
                            else  finalplusamount[m,n-1]+=downtemp;
                            if(n==ygridsize-1)finalplusamount[m,n]+=uptemp;
                            else  finalplusamount[m+1,n+1]+=uptemp;
                            //++++++++++++++++++++++++++++++++++++++++++++

                             //exposed update
                             //++++++++++++++++++++++++++++++++++++++++++++
                            for(int d=0;d<e_to_i_date;d++)
                            {
                                uptemp = up_incdis*dogeachgroup[grabies].exposeamount[m,n,d];
                                downtemp =down_incdis*dogeachgroup[grabies].exposeamount[m,n,d];
                                lefttemp  = left_incdis*dogeachgroup[grabies].exposeamount[m,n,d];
                                righttemp =right_incdis*dogeachgroup[grabies].exposeamount[m,n,d];
                            if(uptemp<exposecriteria) uptemp=0.0f;
                            if(downtemp<exposecriteria) downtemp=0.0f;
                            if(lefttemp<exposecriteria) lefttemp=0.0f;
                            if(righttemp<exposecriteria) righttemp=0.0f;

                            finalplusamount_E[m,n,d]-=(uptemp+ downtemp+lefttemp+righttemp);
                            if(m==0)finalplusamount_E[m,n,d]+=lefttemp;
                            else  finalplusamount_E[m-1,n,d]+=lefttemp;
                            if(m==xgridsize-1)finalplusamount_E[m,n,d]+=righttemp;
                            else  finalplusamount_E[m+1,n,d]+=righttemp;
                            if(n==0)finalplusamount_E[m,n,d]+=downtemp;
                            else  finalplusamount_E[m,n-1,d]+=downtemp;
                            if(n==ygridsize-1)finalplusamount_E[m,n,d]+=uptemp;
                            else  finalplusamount_E[m+1,n+1,d]+=uptemp;
                            }
                            //++++++++++++++++++++++++++++++++++++++++++++
                         
                            //infected update
                             //++++++++++++++++++++++++++++++++++++++++++++
                            up_incdis=inclinefactor[m,n,2]*((chasefactor[m,n,2]+homefactor[m,n,2,grabies])/2.0f)*0.25f;
                            down_incdis=inclinefactor[m,n,3]*((chasefactor[m,n,3]+homefactor[m,n,3,grabies])/2.0f)*0.25f;
                            left_incdis=inclinefactor[m,n,4]*((chasefactor[m,n,4]+homefactor[m,n,4,grabies])/2.0f)*0.25f;
                            right_incdis=inclinefactor[m,n,5]*((chasefactor[m,n,5]+homefactor[m,n,5,grabies])/2.0f)*0.25f;
                             for(int d=0;d<e_to_i_date;d++)
                            {
                                uptemp = up_incdis*dogeachgroup[grabies].infectamount[m,n,d];
                                downtemp =down_incdis*dogeachgroup[grabies].infectamount[m,n,d];
                                lefttemp  = left_incdis*dogeachgroup[grabies].infectamount[m,n,d];
                                righttemp =right_incdis*dogeachgroup[grabies].infectamount[m,n,d];
                            if(uptemp<infectedcriteria) uptemp=0.0f;
                            if(downtemp<infectedcriteria) downtemp=0.0f;
                            if(lefttemp<infectedcriteria) lefttemp=0.0f;
                            if(righttemp<infectedcriteria) righttemp=0.0f;

                            finalplusamount_E[m,n,d]-=(uptemp+ downtemp+lefttemp+righttemp);
                            if(m==0)finalplusamount_E[m,n,d]+=lefttemp;
                            else  finalplusamount_E[m-1,n,d]+=lefttemp;
                            if(m==xgridsize-1)finalplusamount_E[m,n,d]+=righttemp;
                            else  finalplusamount_E[m+1,n,d]+=righttemp;
                            if(n==0)finalplusamount_E[m,n,d]+=downtemp;
                            else  finalplusamount_E[m,n-1,d]+=downtemp;
                            if(n==ygridsize-1)finalplusamount_E[m,n,d]+=uptemp;
                            else  finalplusamount_E[m+1,n+1,d]+=uptemp;
                            }
                            //++++++++++++++++++++++++++++++++++++++++++++
                    }
                }


            //++++++++++++++++++++++++++++++++++++++++++++

            //Applying
            //++++++++++++++++++++++++++++++++++++++++++++
             for (int m = 0; m < xgridsize; m++)
                {
                    for (int n = 0; n < ygridsize; n++)
                    {
                        //suspect
                        //--------------
                        dogeachgroup[grabies].suspectamount[m,n]+=finalplusamount[m,n];
                        //--------------
                        for (int d = 0; d < e_to_i_date; d++)
                        {
                            dogeachgroup[grabies].exposeamount[m,n,d]+=finalplusamount_E[m,n,d];
                        }
                         for (int dd = 0; dd < e_to_i_date; dd++)
                        {
                            dogeachgroup[grabies].infectamount[m,n,dd]+=finalplusamount_R[m,n,dd];
                        }
                    }
                }


            //++++++++++++++++++++++++++++++++++++++++++++
        
            //----------------------------------------------------------------------------------------------------

           

          //State date updater
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++     

            //day of expose change
                //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
          float[,] e_to_i_amount=new float[xgridsize,ygridsize];

            for(int d=e_to_i_date-1; d>=0;d--)
            {
            for (int m = 0; m < xgridsize; m++)
                 {
                    for (int n = 0; n < ygridsize; n++)
                     {

                         if(d== (e_to_i_date-1))
                         {
                            e_to_i_amount[m,n] = dogeachgroup[grabies].exposeamount[m,n,d];
                            //Debug.Log("yay");
                         }

                        if(d!=0)
                        {
                         dogeachgroup[grabies].exposeamount[m,n,d]=dogeachgroup[grabies].exposeamount[m,n,d-1];
                        }
                        else  if(d==0)
                        {
                        dogeachgroup[grabies].exposeamount[m,n,d]=0.0f;
                        }  
                     }
                 }
            }
            //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

            //day of infect change
           //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            for(int d=i_to_r_date-1; d>=0;d--)
            {
            for (int m = 0; m < xgridsize; m++)
                 {
                    for (int n = 0; n < ygridsize; n++)
                     {

                         if(d== (i_to_r_date-1))
                         {
                            dogeachgroup[grabies].infectamount[m,n,d]=0.0f; //dead
                         }

                        if(d!=0)
                        {
                         dogeachgroup[grabies].infectamount[m,n,d]=dogeachgroup[grabies].infectamount[m,n,d-1];
                        }
                        else if(d==0)
                        {
                         dogeachgroup[grabies].infectamount[m,n,d]=e_to_i_amount[m,n];
                        }
                     }
                 }
            }

            //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
            //

             //if run rabies found normal dog,bite
             //need to revise on dog tranfer amount
             //shouldn't fix at group suspect
            //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx    
              for (int m = 0; m < xgridsize; m++)
                 {
                    for (int n = 0; n < ygridsize; n++)
                     {
                         if (foundinfect(m,n))
                         {
                           float rabietranfer;
                           rabietranfer = dogeverygroup.suspectamount[m,n] * biterate * infectedrate * infectsumatpoint_group(m,n,grabies); // 1 is infectamount
                           if (rabietranfer > dogeachgroup[grabies].suspectamount[m,n]) rabietranfer=dogeachgroup[grabies].suspectamount[m,n];
                           dogeachgroup[grabies].exposeamount[m,n,0] += rabietranfer;
                           dogeachgroup[grabies].suspectamount[m,n]-= rabietranfer ;
                         }
                     }
                 }
           //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

             //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    

             //piture creation 
            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    
    

            }
            dogeverygroup_updater();
            createImage(r,100);
        }

            /*  //debug checking
            for (int m = 0; m < xgridsize; m++)
            {
                for (int n = 0; n < ygridsize; n++)
                {
                    if(infectamount[m,n]>0.0f)
                    Debug.Log("WTF infect amout at [" + m + " " + n+ "] is "+infectamount[m,n] );
                }
            }*/
}
